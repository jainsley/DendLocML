source('/media/8AECBFBAECBF9F3F/Documents and Settings/jainsl01/Box Sync/R Code/2014-03-27_Wes_Anderson_Palettes.R')
install.packages("ggplot2", "reshape2", "devtools")
install.packages("ggplot2", "reshape2", "devtools")
?contrasts
?data.frame
data <- data.frame("Col1" = c(1,2,3))
View(data)
source('~/.active-rstudio-document')
View(data)
library(reshape2)
source('~/.active-rstudio-document')
melt(data)
cast(data)
dcast(data)
?dcast
dcast(data, Col1 ~ Col2)
data_cast <- dcast(data, Col1 ~ Col2)
View(data_cast)
is.na(data_cast) <- 0
is.na(data_cast)
data_cast[is.na(data_cast)] <- 0
data_cast[!is.na(data_cast)] <- 1
data_cast <- dcast(data, Col1 ~ Col2)
data_cast[!is.na(data_cast)] <- 1
data_cast[!(is.na(data_cast))] <- 1
data_cast[is.na(data_cast)] <- 0
data_cast <- dcast(data, Col1 ~ Col2)
data_cast[!(is.na(data_cast))] <- 1
data_cast[is.na(data_cast)] <- 0
View(data_cast)
View(data)
data_cast <- dcast(data, Col1 ~ Col2)
data_cast <- dcast(data, Col1 ~ Col2)
data_cast[!(is.na(data_cast[-c(1)]))] <- 1
data_temp <- dcast[-c(1)]
data_temp <- data_cast[-c(1)]
View(data_cast)
View(data_temp)
row.names(data_temp) <- data_cast[,1]
data_temp[!(is.na(data_temp)] <- 1
data <- data.frame("Col1" = c("num1","num2","num2","num3"),
"Col2" = c("A","A","B","C"))
data_cast <- dcast(data, Col1 ~ Col2)
data_temp <- data_cast[-c(1)]
row.names(data_temp) <- data_cast[,1]
data_temp[!(is.na(data_temp)] <- 1
data_temp[!(is.na(data_temp))] <- 1
data_temp[is.na(data_temp)] <- 0
View(data)
View(data_cast)
View(data_temp)
(5/6) * (5/6)
(5/6) * (4/5)
?geom
?rgeom
x <- rnorm(100, 10 , 1)
y <- rgeom(100, 1)
mean(y)
plot(y)
y <- rgeom(100, 0.5)
plot(y)
plot(x,y)
c <- 1:100
x <- rnorm(100, 10 , 1)
y <- rgeom(100, 0.5)
plot(c,y)
plot(y,c)
hist(y)
y <- rgeom(100, 0.01)
hist(y)
y <- rgeom(100, 0.5)
hist(y)
y <- rgeom(100, 0.5)
hist(y)
library("XML")
install.packages('rJava')
install.packages(c("foreach", "iterators"))
alx_qPCR <- data.frame(rep = c("1","2","3"), ratio = c(0.875998319, 0.939112487, 0.826627652))
View(alx_qPCR)
boxplot(alx_qPCR[,2])
boxplot
?boxplot
library(ggplot2)
p <- ggplot(alx_qPCR, aes(alx_qPCR$ratio)) + geom_boxplot()
p
p <- ggplot(alx_qPCR, aes(y=alx_qPCR$ratio)) + geom_boxplot()
p
p <- ggplot(alx_qPCR, aes(alx_qPCR$rep, alx_qPCR$ratio)) + geom_boxplot()
p
alx_qPCR <- data.frame(rep = c("1","1","1"), ratio = c(0.875998319, 0.939112487, 0.826627652))
p <- ggplot(alx_qPCR, aes(alx_qPCR$rep, alx_qPCR$ratio)) + geom_boxplot()
p
p + ylim(0,2)
p + ylim(0.5,1.5)
p + ylim(0.5,1.5) + theme_bw()
p <- ggplot(alx_qPCR, aes(alx_qPCR$rep, alx_qPCR$ratio)) + geom_boxplot() + geom_jitter()
p + ylim(0.5,1.5) + theme_bw()
p <- ggplot(alx_qPCR, aes(alx_qPCR$rep, alx_qPCR$ratio)) + geom_boxplot() + geom_jitter(size=10)
p + ylim(0.5,1.5) + theme_bw()
p <- ggplot(alx_qPCR, aes(alx_qPCR$rep, alx_qPCR$ratio)) + geom_boxplot() + geom_jitter(size=5, color='blue')
p + ylim(0.5,1.5) + theme_bw()
p <- ggplot(alx_qPCR, aes(alx_qPCR$rep, alx_qPCR$ratio)) + geom_boxplot() + geom_jitter(size=7, color='blue')
p + ylim(0.5,1.5) + theme_bw()
p <- ggplot(alx_qPCR, aes(alx_qPCR$rep, alx_qPCR$ratio)) + geom_boxplot() + geom_point(size=7, color='blue')
p + ylim(0.5,1.5) + theme_bw()
p <- ggplot(alx_qPCR, aes(alx_qPCR$rep, alx_qPCR$ratio)) + geom_boxplot() + geom_jitter(size=7, color='blue')
p + ylim(0.5,1.5) + theme_bw()
p <- ggplot(alx_qPCR, aes(alx_qPCR$rep, alx_qPCR$ratio)) + geom_boxplot(color=alx_qPCR$rep) + geom_jitter(size=7, color='blue')
p + ylim(0.5,1.5) + theme_bw()
p <- ggplot(alx_qPCR, aes(alx_qPCR$rep, alx_qPCR$ratio)) + geom_boxplot() + geom_jitter(size=7, color='blue')
p + ylim(0.5,1.5) + theme_bw()
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_jitter(size=7, color='blue')
p + ylim(0.5,1.5) + theme_bw()
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_jitter(size=7, color='blue') + scale_colour_brewer()
p + ylim(0.5,1.5) + theme_bw()
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_jitter(size=7, color='blue') +
scale_colour_brewer(palette="Set1")
p + ylim(0.5,1.5) + theme_bw()
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_jitter(size=7, color='blue') +
scale_fill_brewer(palette="Set1")
p + ylim(0.5,1.5) + theme_bw()
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_jitter(size=7, color='blue') +
scale_fill_brewer(palette="Purples")
p + ylim(0.5,1.5) + theme_bw()
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_jitter(size=7, color='blue') +
scale_fill_brewer(palette="Blues")
p + ylim(0.5,1.5) + theme_bw()
p + ylim(0.5,1.5) + theme_bw() + theme(legend.position="none")
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_jitter(size=7, color='blue') +
scale_fill_brewer(#999999) + ylim(0.5,1.5) + theme_bw()
p + theme(legend.position="none",
)
)
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_jitter(size=7, color='blue') +
scale_fill_brewer(#999999) + ylim(0.5,1.5) + theme_bw()
p + theme(legend.position="none")
)
)
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_jitter(size=7, color='blue') +
scale_fill_brewer('#999999') + ylim(0.5,1.5) + theme_bw()
p + theme(legend.position="none")
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_jitter(size=7, color='blue') +
scale_fill_manual('#999999') + ylim(0.5,1.5) + theme_bw()
p + theme(legend.position="none")
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_jitter(size=7, color='blue') +
scale_fill_manual(values='#999999') + ylim(0.5,1.5) + theme_bw()
p + theme(legend.position="none")
p + theme(legend.position="none",
axis.title.x="",
axis.title.y="Camk2a/Gfap Ratio")
p + theme(legend.position="none",
axis.title.x=element.text(""),
axis.title.y=element.text("Camk2a/Gfap Ratio"))
p + theme(legend.position="none",
axis.title.x=element_text(""),
axis.title.y=element_text("Camk2a/Gfap Ratio"))
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_jitter(size=7, color='blue') +
scale_fill_manual(values='#999999') + ylim(0.5,1.5) + theme_bw() + xlab("") + ylab("Camk2a/Gfap Ratio")
p + theme(legend.position="none",
axis.title.x=element_text(""),
axis.title.y=element_text("Camk2a/Gfap Ratio"))
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_jitter(size=7, color='blue') +
scale_fill_manual(values='#999999') + ylim(0.75,1.25) + theme_bw() + xlab("") + ylab("Camk2a/Gfap Ratio")
p + theme(legend.position="none",
axis.title.x=element_text(""),
axis.title.y=element_text("Camk2a/Gfap Ratio"))
p + theme(legend.position="none",
axis.title.y=element_text(size=20))
p + theme(legend.position="none",
axis.title.y=element_text(size=30))
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_jitter(size=7, color='blue') +
scale_fill_manual(values='#999999') + ylim(0.75,1.25) + theme_bw() + xlab("") + ylab("Camk2a/Gfap Ratio") +
scale_x_discrete(breaks=NULL)
p + theme(legend.position="none",
axis.title.y=element_text(size=30))
p + theme(legend.position="none",
axis.title.y=element_text(size=30),
axis.text.y=element_text(size=20))
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_point(size=7, color='blue') +
scale_fill_manual(values='#999999') + ylim(0.75,1.25) + theme_bw() + xlab("") + ylab("Camk2a/Gfap Ratio") +
scale_x_discrete(breaks=NULL)
p + theme(legend.position="none",
axis.title.y=element_text(size=30),
axis.text.y=element_text(size=20))
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_jitter(size=7, color='blue') +
scale_fill_manual(values='#999999') + ylim(0.75,1.25) + theme_bw() + xlab("") + ylab("Camk2a/Gfap Ratio") +
scale_x_discrete(breaks=NULL)
p + theme(legend.position="none",
axis.title.y=element_text(size=30),
axis.text.y=element_text(size=20))
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_hline(yintercept=20,color='red')
geom_jitter(size=7, color='blue') + #You can change this to geom_point if you want the data points to be plotted in a line
scale_fill_manual(values='#999999') + #Change this to change the boxplot color
ylim(0.75,1.25) + #change the y-axis limit here
theme_bw() +
xlab("") + #removes the x-axis title
ylab("Camk2a/Gfap Ratio") + #set the y axis title
scale_x_discrete(breaks=NULL) #removes the x axis tick marks
p + theme(legend.position="none", #removes the legend
axis.title.y=element_text(size=30), #change the y-axis title text size
axis.text.y=element_text(size=20)) #change the y-axis label text size
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_hline(yintercept=20,color='red') +
geom_jitter(size=7, color='blue') + #You can change this to geom_point if you want the data points to be plotted in a line
scale_fill_manual(values='#999999') + #Change this to change the boxplot color
ylim(0.75,1.25) + #change the y-axis limit here
theme_bw() +
xlab("") + #removes the x-axis title
ylab("Camk2a/Gfap Ratio") + #set the y axis title
scale_x_discrete(breaks=NULL) #removes the x axis tick marks
p + theme(legend.position="none", #removes the legend
axis.title.y=element_text(size=30), #change the y-axis title text size
axis.text.y=element_text(size=20)) #change the y-axis label text size
library(ggplot2)
alx_qPCR <- data.frame(rep = c("1","1","1"), ratio = c(0.875998319, 0.939112487, 0.826627652))
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_hline(yintercept=20,color='red') +
geom_jitter(size=7, color='blue') + #You can change this to geom_point if you want the data points to be plotted in a line
scale_fill_manual(values='#999999') + #Change this to change the boxplot color
ylim(0.75,1.25) + #change the y-axis limit here
theme_bw() +
xlab("") + #removes the x-axis title
ylab("Camk2a/Gfap Ratio") + #set the y axis title
scale_x_discrete(breaks=NULL) #removes the x axis tick marks
p + theme(legend.position="none", #removes the legend
axis.title.y=element_text(size=30), #change the y-axis title text size
axis.text.y=element_text(size=20)) #change the y-axis label text size
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_hline(yintercept=1,color='red') +
geom_jitter(size=7, color='blue') + #You can change this to geom_point if you want the data points to be plotted in a line
scale_fill_manual(values='#999999') + #Change this to change the boxplot color
ylim(0.75,1.25) + #change the y-axis limit here
theme_bw() +
xlab("") + #removes the x-axis title
ylab("Camk2a/Gfap Ratio") + #set the y axis title
scale_x_discrete(breaks=NULL) #removes the x axis tick marks
p + theme(legend.position="none", #removes the legend
axis.title.y=element_text(size=30), #change the y-axis title text size
axis.text.y=element_text(size=20)) #change the y-axis label text size
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() + geom_hline(yintercept=1,color='red',linetype='dashed',size=3) +
geom_jitter(size=7, color='blue') + #You can change this to geom_point if you want the data points to be plotted in a line
scale_fill_manual(values='#999999') + #Change this to change the boxplot color
ylim(0.75,1.25) + #change the y-axis limit here
theme_bw() +
xlab("") + #removes the x-axis title
ylab("Camk2a/Gfap Ratio") + #set the y axis title
scale_x_discrete(breaks=NULL) #removes the x axis tick marks
p + theme(legend.position="none", #removes the legend
axis.title.y=element_text(size=30), #change the y-axis title text size
axis.text.y=element_text(size=20)) #change the y-axis label text size
source('~/Copy/R_Code/Projects/ProjectionTRAP/qPCR_analysis.R')
p + theme(legend.position="none", #removes the legend
axis.title.y=element_text(size=30), #change the y-axis title text size
axis.text.y=element_text(size=20)) #change the y-axis label text size
?wilcox.test
wilcox.test(alx_qPCR$ratio, mu = 1)
alx_qPCR <- data.frame(rep = c("1","1","1"), ratio = c(0.875998319, 0.939112487, 0.826627652))
wilcox.test(alx_qPCR$ratio, mu = 1)
t.test(alx_qPCR$ratio, mu = 1)
?t.test
t.test(alx_qPCR$ratio, mu = 1, alternative="less")
t.test(alx_qPCR$ratio, mu = 1, alternative="greater")
t.test(alx_qPCR$ratio, mu = 1, alternative="t")
t.test(alx_qPCR$ratio, mu = 1, alternative="l")
wilcox.test(alx_qPCR$ratio, mu = 1, alternative="l")
t.test(alx_qPCR$ratio, mu = 1, alternative="l")
date()
library(ggthemes)
install.packages('xkcd')
library(ggthemes)
library(xkcd)
alx_qPCR <- data.frame(rep = c("1","1","1"), ratio = c(0.875998319, 0.939112487, 0.826627652))
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() +
geom_hline(yintercept=1,color='red',linetype='dashed',size=3) + #draw a line at y=1
geom_jitter(size=7, color='blue') + #You can change this to geom_point if you want the data points to be plotted in a line
scale_fill_manual(values='#999999') + #Change this to change the boxplot color
ylim(0.75,1.25) + #change the y-axis limit here
theme_bw() +
xlab("") + #removes the x-axis title
ylab("Camk2a/Gfap Ratio") + #set the y axis title
scale_x_discrete(breaks=NULL) #removes the x axis tick marks
p + theme_xkcd()
library(sysfonts)
install.packages('sysfonts')
install.packages('sysfonts')
library(sysfonts)
library(ggplot2)
if( "xkcd.ttf" %in% font.files()) {
font.add("xkcd", regular = "xkcd.ttf")
p <- ggplot() + geom_point(aes(x=mpg, y=wt), data=mtcars) +
theme(text = element_text(size = 16, family = "xkcd"))
} else {
warning("Not xkcd fonts installed!")
p <- ggplot() + geom_point(aes(x=mpg, y=wt), data=mtcars)
}
p
library(sysfonts)
download.file("http://simonsoftware.se/other/xkcd.ttf", dest="xkcd.ttf", mode="wb")
font.paths()
system("cp xkcd.tff -t ~/.fonts")
system("mkdir ~/.fonts")
system("cp xkcd.tff -t ~/.fonts")
system("cp ./xkcd.tff -t ~/.fonts")
getwd()
system("cp ~/xkcd.tff -t ~/.fonts")
system("cp ~/xkcd.ttf -t ~/.fonts")
font.files()
font.add("xkcd", regular = "xkcd.ttf")
font.families()
if( "xkcd.ttf" %in% font.files()) {
font.add("xkcd", regular = "xkcd.ttf")
p <- ggplot() + geom_point(aes(x=mpg, y=wt), data=mtcars) +
theme(text = element_text(size = 16, family = "xkcd"))
} else {
warning("Not xkcd fonts installed!")
p <- ggplot() + geom_point(aes(x=mpg, y=wt), data=mtcars)
}
p
font.add("xkcd", regular = "xkcd.ttf")
p <- ggplot() + geom_point(aes(x=mpg, y=wt), data=mtcars) +
theme(text = element_text(size = 16, family = "xkcd"))
p
xrange <- range(mtcars$mpg)
yrange <- range(mtcars$wt)
set.seed(123) # for reproducibility
p <- ggplot() + geom_point(aes(mpg, wt), data=mtcars) +
xkcdaxis(xrange,yrange)
p
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() +
geom_hline(yintercept=1,color='red',linetype='dashed',size=3) + #draw a line at y=1
geom_jitter(size=7, color='blue') + #You can change this to geom_point if you want the data points to be plotted in a line
scale_fill_manual(values='#999999') + #Change this to change the boxplot color
ylim(0.75,1.25) + #change the y-axis limit here
#theme_bw() +
xkcdaxis(0.75:1.25) +
xlab("") + #removes the x-axis title
ylab("Camk2a/Gfap Ratio") + #set the y axis title
scale_x_discrete(breaks=NULL) #removes the x axis tick marks
p + theme(legend.position="none", #removes the legend
axis.title.y=element_text(size=30), #change the y-axis title text size
axis.text.y=element_text(size=20)) #change the y-axis label text size
p <- ggplot(alx_qPCR, aes(rep, ratio, fill=rep)) + geom_boxplot() +
geom_hline(yintercept=1,color='red',linetype='dashed',size=3) + #draw a line at y=1
geom_jitter(size=7, color='blue') + #You can change this to geom_point if you want the data points to be plotted in a line
scale_fill_manual(values='#999999') + #Change this to change the boxplot color
ylim(0.75,1.25) + #change the y-axis limit here
#theme_bw() +
xkcdaxis(0.75:1.25,1) +
xlab("") + #removes the x-axis title
ylab("Camk2a/Gfap Ratio") + #set the y axis title
scale_x_discrete(breaks=NULL) #removes the x axis tick marks
install.packages('Lahman')
install.packages('plyr')
install.packages('dplyr')
library(Lahman)
library(dplyr)
players <- group_by(Batting, playerID)
View(players)
head(Batting)
head(players)
?group_by
players_nodplyr <- Batting
identical(players,players_nodplyr)
games <- summarise(players, total = sum(G))
View(games)
?arrange
head(arrange(games, desc(total)), 5)
head(arrange(games, RBI), 5)
?desc
head(arrange(games, desc(RBI)), 5)
View(games)
View(games)
head(arrange(players, desc(RBI)), 5)
View(players)
access_token <- "CAACEdEose0cBAI1oF9BcXghvPXCduXrcRwPZBHkmGXSVDAJi8nCl0ylzZBZANksL4qTS2uHptDM0cYSZB8tGSOZCAycAfqnNj7v1voLpMCIxJ5hMuNSu7e0OfnsiEZCeU6qyw45d0qOF5UyEEpVzK0ULN1paqMyJXzeFm9ru29Ec5LymvltP70jtxxajoNyEmmZAkMddzzQsgZDZD"
require(RCurl)
require(rjson)
install.packages('rjson')
require(rjson)
# Facebook json function copied from original (Romain Francois) post
facebook <-  function( path = "me", access_token, options){
if( !missing(options) ){
options <- sprintf( "?%s", paste( names(options), "=", unlist(options), collapse = "&", sep = "" ) )
} else {
options <- ""
}
data <- getURL( sprintf( "https://graph.facebook.com/%s%s&access_token=%s", path, options, access_token ) )
fromJSON( data )
}
### MY FACEBOOK POSTS
myposts <- list()
i <- 0
next.path <- "me/posts"
# download all my posts
while(length(next.path)!=0) {
i<-i+1
myposts[[i]] <- facebook(path=next.path , access_token=access_token)
next.path <- sub("https://graph.facebook.com/", "", myposts[[i]]$paging$'next')
}
myposts[[i]] <- NULL
# parse the list, extract number of likes and the corresponding text (status)
parse.master <- function(x, f)
sapply(x$data, f)
parse.likes <- function(x) if(!is.null(x$likes$count)) x$likes$count else 0
mylikes <- unlist(sapply(myposts, parse.master, f=parse.likes))
parse.messages <- function(x) if(!is.null(x$message)) x$message else NA
mymessages <- unlist(sapply(myposts, parse.master, f=parse.messages))
# and the most liked status is...
mymessages[which.max(mylikes)]
setwd("~/Copy/R_Code/Projects/DendLocML/data")
source('~/Copy/R_Code/Projects/DendLocML/test.R')
source('~/.active-rstudio-document')
source('~/Copy/R_Code/Projects/DendLocML/test.R')
source('~/.active-rstudio-document')
?Sys.sleep
?union
